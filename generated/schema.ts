// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Seller extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Seller entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Seller entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Seller", id.toString(), this);
  }

  static load(id: string): Seller | null {
    return store.get("Seller", id) as Seller | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pointer(): Bytes {
    let value = this.get("pointer");
    return value.toBytes();
  }

  set pointer(value: Bytes) {
    this.set("pointer", Value.fromBytes(value));
  }

  get sPointer(): string | null {
    let value = this.get("sPointer");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sPointer(value: string | null) {
    if (value === null) {
      this.unset("sPointer");
    } else {
      this.set("sPointer", Value.fromString(value as string));
    }
  }

  get merchant(): Bytes {
    let value = this.get("merchant");
    return value.toBytes();
  }

  set merchant(value: Bytes) {
    this.set("merchant", Value.fromBytes(value));
  }

  get infohash(): Bytes {
    let value = this.get("infohash");
    return value.toBytes();
  }

  set infohash(value: Bytes) {
    this.set("infohash", Value.fromBytes(value));
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }
}

export class History extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save History entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save History entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("History", id.toString(), this);
  }

  static load(id: string): History | null {
    return store.get("History", id) as History | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get merchant(): Bytes | null {
    let value = this.get("merchant");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set merchant(value: Bytes | null) {
    if (value === null) {
      this.unset("merchant");
    } else {
      this.set("merchant", Value.fromBytes(value as Bytes));
    }
  }

  get customer(): Bytes | null {
    let value = this.get("customer");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set customer(value: Bytes | null) {
    if (value === null) {
      this.unset("customer");
    } else {
      this.set("customer", Value.fromBytes(value as Bytes));
    }
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (value === null) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(value as BigInt));
    }
  }

  get token(): string | null {
    let value = this.get("token");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (value === null) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(value as string));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get pointer(): string | null {
    let value = this.get("pointer");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pointer(value: string | null) {
    if (value === null) {
      this.unset("pointer");
    } else {
      this.set("pointer", Value.fromString(value as string));
    }
  }
}
