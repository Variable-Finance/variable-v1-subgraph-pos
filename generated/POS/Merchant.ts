// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CreateMerchant extends ethereum.Event {
  get params(): CreateMerchant__Params {
    return new CreateMerchant__Params(this);
  }
}

export class CreateMerchant__Params {
  _event: CreateMerchant;

  constructor(event: CreateMerchant) {
    this._event = event;
  }

  get merchant(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get infohash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get pointer(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Merchant__merchantInfoResult {
  value0: Address;
  value1: Bytes;
  value2: Bytes;

  constructor(value0: Address, value1: Bytes, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    map.set("value2", ethereum.Value.fromBytes(this.value2));
    return map;
  }
}

export class Merchant extends ethereum.SmartContract {
  static bind(address: Address): Merchant {
    return new Merchant("Merchant", address);
  }

  merchantInfo(_query: Address): Merchant__merchantInfoResult {
    let result = super.call(
      "merchantInfo",
      "merchantInfo(address):(address,bytes,bytes)",
      [ethereum.Value.fromAddress(_query)]
    );

    return new Merchant__merchantInfoResult(
      result[0].toAddress(),
      result[1].toBytes(),
      result[2].toBytes()
    );
  }

  try_merchantInfo(
    _query: Address
  ): ethereum.CallResult<Merchant__merchantInfoResult> {
    let result = super.tryCall(
      "merchantInfo",
      "merchantInfo(address):(address,bytes,bytes)",
      [ethereum.Value.fromAddress(_query)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Merchant__merchantInfoResult(
        value[0].toAddress(),
        value[1].toBytes(),
        value[2].toBytes()
      )
    );
  }

  pointerAddress(_pointer: string): Address {
    let result = super.call(
      "pointerAddress",
      "pointerAddress(string):(address)",
      [ethereum.Value.fromString(_pointer)]
    );

    return result[0].toAddress();
  }

  try_pointerAddress(_pointer: string): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pointerAddress",
      "pointerAddress(string):(address)",
      [ethereum.Value.fromString(_pointer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  register(_pointer: string, _hash: string): boolean {
    let result = super.call("register", "register(string,string):(bool)", [
      ethereum.Value.fromString(_pointer),
      ethereum.Value.fromString(_hash)
    ]);

    return result[0].toBoolean();
  }

  try_register(_pointer: string, _hash: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("register", "register(string,string):(bool)", [
      ethereum.Value.fromString(_pointer),
      ethereum.Value.fromString(_hash)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get _pointer(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _hash(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
